https://www.in28minutes.com/gcp-bookshelf
-----------------------------------------

***What is Cloud and Why do we need Cloud?
- Online shopping applications typically have peak usage during holidays and weekends.
  - They would have a lot of load on the application and rest of the time, there are low loads.
- The solution before the cloud was to do peak load provisioning.
  - Peak load provisioning refers to buy/procure infrastructure to support that kind of load.
  - (Question) What would that infrastructure be doing during periods of low loads?
    - It would just be sitting idle.
  - Disadvantages:
    - High cost of procuring infrastructure.
    - Needs ahead of time planning ((Question) Can you guess the future?).
    - Low infrastructure utilization (PEAK LOAD provisioning).
    - Dedicated infrastructure maintenance team ((Question) Can a startup afford it?).
- Silver Lining in the Cloud
  - (Question) How about provisioning (renting) resources when you want them and releasing them back when you do not need them?
    - On-demand resource provisioning.
    - Also called Elasticity
- Cloud Advantages
  - Trading 'capital expence' for 'variable expense'.
  - Benefiting from massive economies of scale.
  - No need to guess capacity any more.
  - No need to spend money running and maintaining data centers.
  - Can go Global in minutes.

***Google Cloud Platform
- One of the Top 3 cloud service providers
- Provides a number of services (200+)
- Reliable, secure and highly-performant:
  - Infrastructure that powers 8 services with over 1 Billion Users:
    - Gmail, Google Search, Youtube, etc.
- Cleanest Cloud
  - Net carbon-neutral cloud (electricity used matched 100% with renewable energy)
- Cloud applications make use of multiple GCP services

***Regions and Zones
- (Question) What if an application is deployed in a data center in London?
  - What would be the challenges?
    - Slow access for users from other parts of the world (high latency).
    - What if the data center crashes?
      - The application goes down (low availability).
      - A solution would be adding one more data center in London.
      - Challenges would be
        - Slow access for users from other parts of the world.
        - (Question) What if one data center crashes? (Solved)
        - What if entire region of London is unavailable?
          - The application goes down.
  - Another solution would be deploying in a new region (Say Mumbai)
    - What would be the challenges?
      - Comparably faster than before but still slow access for users from other parts of the world.
        - This can be solved completely by adding deployments for the application in other regions.
      - Even if one data center crashes, the others are available from other regions.
- Setting up data centers in different regions around the world is not easy.
  - (Solution) Google provides 20+ regions around the world (expanding every year).
- Region refers to specific geographical location to host the resources.
- Advantages
  - High Availability.
  - Low latency (Servers can be served from the nearest available region)
  - Global Footprint (A startup in a specific region might be able to easily deploy applications to multiple parts of the world. Therefore, it can create global applications.)
  - Adhere to government regulations
    - Different countries have different regulations.
    - Say US wants the data related to all their citizens, to reside within US only.
      - In those kind of situations, a region can be created in US and store data related to US customers only in that specific region.
- (Question) How to achieve high availability in the same region (or geographic location)?
  - (Solution) Each region has three or more zones.
  - Advantages are increased availability and fault tolerance within same region.
  - (Note) Each zone has one or more discrete clusters
    - Cluster is a distinct physical infrastructure that is housed in a data center.
  - (Note) Zones in a region are connected through low-latency links.
  - New regions and zones are constantly added.
  - An example is as below
Region Code	Region					Zones	Zones List
us-west1	The Dalles, Oregon, North America	3	us-west1-a
								us-west1-b
								us-west1-c
europe-north1	Hamina, Finland, Europe			3 	europe-north1-a
								europe-north1-b
								europe-north1-c
asia-south1	Mumbai, India APAC			3	asia-south1-a
								asia-south1-b
								asia-south1-c

***Google Compute Engine (GCE)
- In corporate data centers, applications are deployed to physical servers.
- (Question) Where do you deploy applications in cloud?
  - Rent virtual servers.
  - Virtual Machines - Virtual servers in GCP.
  - Google Compute Engine (GCE) - Provision & Manage Virtual Machines.
- Features
  - Create and manage(start, stop, restart, or terminate) lifecycle of Virtual Machine (VM) instances.
  - Load balancing and auto scaling of multiple VM instances.
  - Attach storage (&network storage) to VM instances.
  - Manage network connectivity and configuration for VM instances.
- Goal (Optional)
  - Setup VM instances as HTTP (Web) Server.
  - Distribute load with Load Balancers.

***Hands-on for Computer Engine
- To create a few VM instances and play with them.
- To checkout the lifecycle of VM instances.
- To use SSH to connect to VM instances.

***IP Addresses - Virtual Machines
- An IP Address (short for Internet Protocal address) is a unique string of numbers separated by periods or colons that identifies each device connected to a computer network that uses the Internet Protocol for communication.
- Internal IP Address is a permanent internal ip address that does not change during the lifetime of an instance
  - It can only be used inside the specific network.
- External or Ephemeral IP Address changes when an instance is stopped
- Static IP Address is a permanent external ip address that can be attached to a VM.
- Static IP Addresses when built and not used needs to be released (otherwise, it will be billed).

***Simplifying VM HTTP server setup
- (Question) How do we reduce the number of steps in creating a VM instance and setting up a HTTP Server?
- Some of the options are:
  - Startup script
  - Instance Template
  - Custom Image
- (Question) How to use a startup script?
  - The process of installing any software or patches when a VM instance is launched is called Bootstrapping.
  - In VM, startup script can be configured to bootstrap.
- (Question) Why do you need to specify all the VM instance details (Image, instance type, etc.) every time you launch an instance?
  - How about creating an Instance template?
  - Define machine type, image, labels, startup script and other properties.
- Instance templates are used to create VM instances and managed instance groups
  - It provides a convenient way to create similar instances.
  - An instance template cannot be updated. To make a change, it needs to be copied and modified.
- Reducing launch time with custom image
  - Installing OS patches and software at luanch of VM instances increases boot up time.
  - (Question) How about creating a custom image with OS patches and software pre-installed?
    - Can be created from an instance, a persistent disk, a snapshot (copy of a persistent disk), another image, or a file in Cloud Storage.
    - Can be shared across projects
    - (Recommendation) Deprecate old images (& specify replacement image)
    - (Recommendation) Hardening an image - Customize images to (adhere to) the corporate security standards.
  - Custom Images preferred over startup scripts.
  - Disks are hard disks that are associated with the VMs.

***Minimizing Costs
- Sustained use discounts
  - Automatic discounts for running VM instances for significant portion of the billing month.
    - Example: If you use N1, N2 machine types for more than 25% of a month, you get a 20% to 50% discount on every incremental minute.
    - Discount increases with usage (graph).
    - No action required on our part! (Automatically appied by the Platform).
  - Applicable for instances created by Google Kubernetes Engine and Compute Engine.
  - Does NOT apply on certain machine types (example: E2 and A2).
  - Does NOT apply to VMs created by App Engine flexible and Dataflow.
- Committed use discounts (needs a commitment from user)
  - For workloads with predictable resource needs
  - Commit for 1 year or 3 years
  - Up to 70% discount based on machine type and GPUs
  - Applicable for instances created by Google Kubernetes Engine and Compute Engine
  - (Note) You CANNOT cancel commitments
    - Reach out to Cloud Billing Support if you made mistake while purchasing commitments.
- Preemptible VM
  - Short-lived cheaper (upto 80%) compute instances
    - Can be stopped by GCP any time (preempted) within 24 hours.
  - Instances get 30 second warning (to save anything they want to save)
  - Cases when Preemptible VM's are used:
    - When applications are fault tolerant
    - When cost is the primary factor
    - When workload is NOT immediate
    - Example: Non immediate batch processing jobs
  - Restrictions
    - Not always available.
    - No SLA (Service Level Agreement) and Cannot be migrated to regular VMs.
    - No Automatic Restarts.
    - Free Tier credits not applicable.
- Spot VMs (Latest version of Preemptible VMs)
  - Key difference is that Spot VMs does not have a maximum runtime.
    - Compared to traditional preemptible VMs which have a maximum runtime of 24 hours.
  - Other features similar to traditional preemptible VMs
    - May be reclaimed at any time 30-second notice.
    - NOT always available.
    - Dynamic Pricing: 60-91% discount compared to on-demand VMs.
    - Free Tier credits not applicable.

***Sole Tenant Nodes
- Shared Tenancy (Default)
  - Single host machine can have instances from multiple customers.
- Sole Tenant Nodes are virtualized instances on hardware dedicated to one customer.
- Use cases:
  - Security and compliance requirements: You want your VMs to be physically separated from those in other projects.
  - High performance requirements: Group your VMs together.
  - Licensing requirements: Using per-core or per-processor "Bring your own licenses"

***Custom Machine Types
- (Question) What do you do when predefined VM options are NOT appropriate for your workload?
  - Create a machine type customized to your needs (a Custom Machine Type).
- vCPUs, memory and GPUs can be adjusted with custom machine types.
  - Choose between E2, N2, or N1 machine types
  - Supports a wide variety of Operating Systems: CentOS, CoreOS, Debian, Red Hat, Ubuntu, Windows, etc.
  - Billed per vCPUs, memory provisioned to each instance
    - Example: Hourly Price: $0.033174 / vCPU + $0.004446 / GB

***GCE - VM Costs
- 2 primary costs in running VMs using GCE:
  - 1: Infrastructure cost to run our VMs
  - 2: Licensing cost for your OS (ONLY for Premium Images)
    - Premium Image Examples: Red Hat Enterprise Linux (RHEL), SUSE Linux Enterprise Server (SLES), Ubuntu Pro, Windows Server, ..
  - Options For Licensing:
    - 1: You can use Pay-as-you-go model (PAYG) OR
    - 2: (WITHIN A LOT OF CONSTRAINTS) You can use your existing license/subscription (Bring your own subscription/license - BYOS/BYOL)
- (RECOMMENDED) if you have existing license for a premium image, use it while your license is valid
  - After that you can shift to Pay-as-you-go model (PAYG)

***Quick Review
- Image
  - What operating system and what software do you want on the VM instance?
  - Reduce boot time and improve security by creating custom hardened images.
  - You can share an image with other projects.
- Machine Types
  - Optimized combination of compute (CPU, GPU) memory, disk (storage) and networking for specific workloads.
  - You can create your own Custom Machine Types when existing ones you don't fit to your needs.
- Static IP Addresses: Get a constant IP addresses for VM instances.
- Instance Templates: Pre-configured templates simplifying the creation of VM instances.
- Sustained use discounts: Automatic discounts for running VM instances for significant portion of the billing month.
- Committed use discounts: 1 year or 3 year reservations for workloads with predictable resource needs.
- Preemptible VM: Short-lived cheaper (upto 80%) compute instances for non-time-critical fault-tolerant workloads.

***GCE - Scenarios
- I want to ensure my VM runs a specific operating system and software stack for mu application - Custom Image
- I need to optimize my VM for a specialized workload required a unique mix of CPU, memory, and storage - Custom Machine Types
- My application requires a fixed IP address that doesn't change between reboots or reassignments - Static IP Addresses
- I have predictable resource needs and want to commit to a 1 or 3-year plan to enjoy deeper discounts - Committed Use Discounts
- I need to run short-lived, fault-tolerant workloads that can tolerate interruptions in exchange for lower costs - Committed Use Discounts
- I need to run short-lived, fault-tolerant workloads that can tolerate interruptions in exchange for lower costs - Preemptible VMs

***Instance Groups
- (Question) How do you create a group of VM instances?
  - Instance Group - Group of VM instances managed as a single entity.
- Two types of instance groups:
  - Managed: Identical VMs created using a instance template.
    - Features: Auto scaling (based on the number of users using the instance group you can scale the number of number of computing instances up and down), auto healing (you can configure a health check and if the health check fails, that specific instance would be automatically replaced with a new instance), and managed releases (you can go from one version to another without any down time.)
  - Unmanaged: Different configuration for VMs in same group.
    - Does NOT offer auto scaling, auto healing & other services.
    - Not Recommended unless you need different kinds of VMs.
- Location can be Zonal or Regional
  - Regional gives you higher availability (RECOMMENDED).
- Managed Instance Groups (MIG)
  - Identical VMs created using an instance template.
  - Important features:
    - Maintain certain number of instances 
      - If an instance crashes, MIG launches another instance.
    - Detect application failures using health checks (self healing)
    - Increase and decrease instances based on load (auto scaling)
    - Able to add load balancer to distribute load
    - Create instances in multiple zones (regional MIGs)
      - Regional MIGs provide higher availability compared to zonal MIGs.
    - Release new application versions without downtime.
      - Rolling updates: Release new version step by step (gradually). Update a percentage of instances to the new version at a time.
      - Canary Deployment: Test new version with a group of instances before releasing it across all instances.
- Creating Managed Instance Group
  - Instance template is mandatory
  - Configure auto-scaling to automatically adjust number of instances based on load:
    - Minimum number of instances
    - Maximum number of instances
    - Autoscaling metrics: CPU Utilization target or Load Balancer Utilization target or Any other metric from Stack Driver
      - Cool-down period: How long to wait before looking at auto scaling metrics again.
      - Scale In Controls: Prevent a sudden drop in no of VM instances
        - Example: Don't scale in by more than 10% or 3 instances in 5 minutes.
      - Autohealing: Configure a Health check with initial delay (how long should you wait for your app to initialize before running a health check?)

***GCP - Cloud Load Balancing
- Helps distribute traffic across VM instances in one or more regions.
- Managed service:
  - Google Cloud ensures that it is highly available
  - Auto scales to handle huge loads
  - Load Balancers can be public or private
- Types:
  - External HTTP(S)
  - Internal HTTP(S)
  - SSL Proxy
  - TCP Proxy
  - External Network TCP/UDP
  - Internal TCP/UDP

***Managed Services
- (Question) Do you want to continue running applications in the cloud, the same way you run them in your data center?
  - Or, are there other approaches?
- Some terminology used with cloud services:
  - IaaS (Infrastructure as a Service)
  - PaaS (Platform as a Service)
  - FaaS (Function as a Service)
  - CaaS (Container as a Service)
  - Serverless
  - more..
***IAAS (Infrastructure as a Service)
- Use only infrastructure from cloud provider
- Example: Using VM to deploy your applications or databases
- You are responsible for:
  - Application Code and Runtime
  - Configuring load balancing
  - Auto scaling
  - OS upgrades and patches
  - Availability
  - etc.. (and a lot of things!)
Applications (Manually setup by User)
Application Runtime (Manually installed by User)
OS (Installed by User)
Virtualization (Managed by Cloud)
Physical Hardware (Provided by Cloud)
Networking (Provided by Cloud)

***PAAS (Platform as a Service)
-Use a platform provided by cloud
- Cloud provider is responsible for:
  - OS (incl. upgrades and patches)
  - Application Runtime
  - Auto scaling, Availability & Load balancing, etc.
- You are responsible for:
  - Configuration (of Application and Services)
  - Application code (if needed)
- Examples:
  - Google App Engine
  - Azure App Service
- Varieties:
  - CAAS (Container as a Service): Containers instead of Apps
  - FAAS (Function as a Service): Functions instead of Apps
  - Databases - Relational & NoSQL (Amazon RDS, Google Cloud SQL, Azure SQL Database etc.), Queues, AI, ML, Operations, etc.
Applications (Configured by User)
Application Runtime (Installed by Cloud)
OS (Installed by Cloud)
Virtualization (Managed by Cloud)
Physical Hardware (Provided by Cloud)
Networking (Provided by Cloud)

***Microservices
- Enterprises are heading towards microservices architectures
  - Build small focused microservices
    - Flexibility to innovate and build applications in different programming languages (Go, Java, Python, JavaScript, etc.)
- But deployments become complex!
- (Question) How can we have one way of deploying Go, Java, Python or JavaScript, etc. microservices?
  - (Solution) Enter containers
  - One of the popular container related tools is Docker
    - Create Docker images for each microservice
    - Docker image has all needs of a microservice:
      - Application Runtime (JDK or Python or NodeJS)
      - Application code and Dependencies
- Some of the services of containers provided by Cloud are ECS (Elastic Container Service) by AWS, Cloud Run by GCP, etc.
- Runs the same way on any infrastructure:
  - Your local machine
  - Corporate data center
  - Cloud
- Advantages
  - Docker containers are light weight
    - Compared to Virtual Machines as they do not have a Guest OS
  - Docker provides isolation for containers
  - Docker is cloud neutral (an image can be run on any cloud provider such as AWS, Azure, Google Cloud, etc.)

***Container Orchestration
  - (Case Study) Requirement: I want 10 instances of Microservice A container, 15 instances of Microservice B container and ...
  - One of the popular container orchestration services is Kubernetes, and all the cloud providers provide Kubernetes services such as EKS (Elastic Kubernetes Service) by AWS, AKS (Azure Kubernetes Service) by Azure, GKE (Google Kubernetes Engine) by GCP), etc.
  - Typical Features
    - Auto Scaling - Scale containers based on demand
    - Service Discovery - Help microservices find one another
      - Do not need to hardcode URL of one microservice from other microservices
      - Each microservice can ask the container orchestrator for the location of other microservices
    - Load Balancer - Distribute load among multiple instances of a microservice
    - Self Healing - Do health checks and replace failing instances
    - Zero Downtime Deployments - Release new versions without downtime

***Serverless
- What do we think about when we develop an application?
  - Where to deploy? What kind of server? What OS?
  - How do we take care of scaling and availability of the application?
- What if you don't need to worry about servers and focus on your code?
  - Enter Serverless
    - (Note) Serverless does not mean No Servers
    - It means the servers are not visible to you (on which your code is running)
  - Features
    - You don't have worry about infrastructure (ZERO visibility into infrastructure)
      - Flexible scaling and automated high availability
    - Most Important: Pay for use
      - Ideally, zero requests means zero cost
    - You focus on code and the cloud managed service takes care of all that is needed to scale your code to serve millions of requests!
    - And you pay for requests and not servers!
- Some of the examples
  - All the FAAS (Function as a Service) services
  - AWS Lambda in AWS
  - Azure Functions in Azure
  - Google Functions in GCP

***SAAS (Software as a Service)
- Centrally hosted software (mostly on the cloud)
  - Offered on a subscription basis (pay-as-you-go)
  - Examples:
    - Email, calendaring & office tools (such as Outlook 365, Microsoft Office 365, Gmail, Google Docs), etc.
    - Customer relationship management (CRM), enterprise resource planning (ERP) and document management tools, etc.
  - The users of these services do not need to worry about any of the details behind the software or hardware or the applications that are used to run these applications. They do not need to know how the applications are built.
- Cloud provider is responsible for:
  - OS (incl. upgrades and patches)
  - Application Runtime
  - Auto scaling, Availability & Load balancing, etc.
  - Application code and/or
  - Application Configuration (How much memory? How many instances?..)
- Customer is responsible for:
  - Configuring the software!

***Shared Responsibility Model
- Security in cloud is a Shared Responsibility
  - Between GCP and the Customer
- GCP provides features to make security easy:
  - Encryption at rest by default
  - IAM
  - KMS
  - more..
- Customer responsibility vary with model:
Responsibilities		IaaS	PaaS	SaaS
-----------------------------------------------------
Content				User	User	User
Access policies			User	User	User
Usage				User	User	User
Deployment			User	User	Cloud
Web application security	User	User	Cloud
Identity			User	Cloud	Cloud
Operations			User	Cloud	Cloud
Access and authentication	User	Cloud	Cloud
Network security		User	Cloud	Cloud
Guest OS, data & content	User	Cloud	Cloud
Audit logging			Cloud	Cloud	Cloud
Network				Cloud	Cloud	Cloud
Storage + encryption		Cloud	Cloud	Cloud
Hardened Kernel + IPC		Cloud	Cloud	Cloud
Boot				Cloud	Cloud	Cloud
Hardware			Cloud	Cloud	Cloud
- Google Cloud is always responsible for Hardware, Network, Audit Logging, etc.

***Managed Services for Compute
- Compute Engine
  - High-performance and general purpose VMs that scale globally
  - IaaS
- Google Kubernetes Engine
  - Orchestrate containerized microservices on Kubernetes
  - Needs advanced cluster configuration and monitoring
    - You create a cluster and the cluster contains a number of nodes or number of instances
    - You deploy your microservices using Kubernetes into the cluster
  - CaaS
  - It is recommended for complex microservices architectures.
- App Engine
  - Build highly scalable application on a fully managed platform using open and familiar languages and tools
  - PaaS (CaaS, Serverless)
  - Serverless is possible when mode is App Engine standard
- Cloud Functions
  - Build event driven application using simple, single-purpose functions
  - This is a true serverless service from GCP
  - FaaS (Serverless)
  - Use Cases
    - if you want to do something immediately as soon as there is a message on the queue, you can create a cloud function to listen on the queue and react to it.
    - if you want to do something as soon as an object is uploaded into cloud storage, you can do that using a cloud function.
- Cloud Run
  - Develop and deploy highly scalable containerized applications.
    - Does NOT need a cluster unlike Kubernetes Engine
  - CaaS (Serverless)
  - It is recommended for simpler architectures.

***App Engine
- Simplest way to deploy and scale applications in GCP
  - Provides end-to-end application management
- Supports:
  - Go, Java, .NET, Node.js, PHP, Python, Ruby using pre-configured runtimes
  - Use custom run-time and write code in any language as it supports running containers
  - Connect to variety of Google Cloud storage product (Cloud SQL, Object Storage (or Cloud Storage) etc.)
    - You can also talk to a queue 
  - No usage charges for App Engine itself - But pay for resources provisioned
    - if you have provision compute instances through app engine, then you'd pay for those
  - Features
    - Automatic load balancing & Auto scaling
    - Managed platform updates & Application health monitoring
    - Application versioning
    - Traffic splitting
      - You can have any number of versions of application and can split the traffic between them
      - Say you may want to send 30% of traffic to the latest version and 70% to v3 or some other versions.

***Compute Engine vs App Engine
- Compute Engine
  - IaaS
  - More Flexibility
  - More Responsibility
    - Choosing Image
    - Installing Software
    - Choosing Hardware
    - Fine grained Access/Permissions (Certificates/Firewalls)
    - Availability, etc.
- App Engine
  - PaaS
  - Serverless
  - Lesser Responsibility
  - Lower Flexibility
    - If you'd want to add a GPU, you cannot do that with an App Engine
- Use Case
  - If you have a simple Java application or Python application or a containerized application already present, and want to easily deploy that to cloud, then App Engine might be the right option. 

***App Engine Environments
- There are two different types of environments which are offered by App Engine
  - Standard
  - Flexible
- Standard
  - Applications run in language specific sandboxes
    - V1: Java, Python, PHP, Go (Old versions)
    - V2: Java, Python, PHP, Ruby, Go (Newer versions)
  - Complete isolation from OS/Disk
  - There is no need to worry about creating instances, instance groups, or managing load balancing or scaling, etc.
  - Only code and app engine configuration needs to be provided, and all other important features are provided by app engine
  - Supports scale down to zero instances.
    - To reduce the cost
gcloud app deploy
gcloud app services list
gcloud app versions list
gcloud app instances list
gcloud app deploy --version=v2
gcloud app browse --version v2
- Flexible - Application instances run within Docker containers
  - Makes use of Compute Engine virtual machines
  - Anything for which you can create a Docker container image, you can provide that image as an input to flexible and flexible can run it for you.
  - Support ANY runtime (with built-in support for Python, Java, Node.js, Go, Ruby, PHP, or .NET)
    - If you provide the code for any of these applications, flexible can build the container image and then deploy it to App Engine Flexible
  - Cannot scale down to Zero instances.
    - If you have an App Engine Flexible application running, it would have at least one instance running all the time

***Service Categories - Scenarios
- To deploy custom application in virtual machines, IaaS is solution
- Gmail is SaaS
- Deploying app using App Engine comes under PaaS
- Customer is not responsible for OS updates when using PaaS
- Customer can configure auto scaling needs in PaaS
- Customer is not responsible for Availability when using PaaS
- Customer doesn't have access to VM instances in App Engine (PaaS)
- Customer cannot install custom software in PaaS
- PaaS services can also offer Database services too along with Compute services
  - Running and managing databases manually is very tough using virtual machine
    - (Solution) Managed database services (PaaS) helps in solving it

***Google Kubernetes Engine (GKE)
- Kubernetes is the most popular open source container orchestration solution
- Provides cluster management (including upgrades)
  - Each cluster can have different types of virtual machines
- Provides all important container orchestration features
  - Auto Scaling
  - Service Discovery
  - Load Balancer
  - Self Healing
  - Zero Downtime Deployments
- Google Kubernetes Engine is the managed Kubernetes service
- It minimizes operations with auto-repair (repair failed nodes) and auto-upgrade (use latest version of K8S always) features
- Provides Pod and Cluster Autoscaling
  - You might be running multiple microservices in a Kubernetes cluster, and these microservices might be running on different nodes of the cluster.
  - Pod auto scaling deals with increasing the number of instances for a specific microservice
    - If you run out of capacity of a cluster, that's where you need cluster autoscaling
- Enables cloud logging and cloud monitoring with simple configuration
- Uses Container-optimized OS, a hardened OS built by Google
- Provides support for persistent disks and local ssd
  - Can attach with the nodes that are part of the cluster

***Kubernetes - A Microservice Journey - Getting Started, Deployment, Autoscaling, & More
- Create a Kubernetes cluster with default node pool
gcloud container clusters create 
  - or use cloud console
- Login to Cloud Shell
- Connect to Kubernetes Cluster
gcloud container clusters get-credentials my-cluster --zone us-central1-a --project solid-course-258105
- Deploy Microservice to Kubernetes
  - Create deployment & service using kubectl commands
kubectl create deployment hello-world-rest-api --image=in28min/helllo-world-rest-api:0.0.1.RELEASE
kubectl expose deployment hello-world-rest-api --type=LoadBalancer --port=8080
- If you want to increase the number of nodes in a cluster or to add a node pool to a cluster or to add a cluster, gcloud container clusters command is used
- If you want to deploy something to the cluster or to expose the microservice to an external world, kubectl command is used.
- To look at the deployment solution, the below command is used
kubectl get deployment
- You can increase number of instances of microservice by
kubectl scale deployment hello-world-rest-api --replicas=2
- You can get pods by 
kubectl get pods
- To increase number of nodes in a Kubernetes cluster, below is the command
gcloud container clusters resize my-cluster --node-pool my-node-pool --num-nodes 5
- Manually increasing number of instances and nodes is mandatory
  - We can auto-scale
- Setup autoscaling for microservice by
kubectl autoscale deployment hello-world-rest-api --max=4 --cpu-percent=70
  - This method is also called horizontal pod autoscaling - HPA
kubectl get hpa
- Setup auto scaling for Kubernetes cluster by
gcloud container clusters update cluster-name --enable-autoscaling --min-nodes=1 --max-nodes=10
- Delete the microservice by
  - for deleting service
kubectl delete service
  - for deleting deployment
kubectl delete deployment
- Delete the cluster by
gcloud container clusters delete

***Cloud Functions
- (Question) Imagine you want to execute some code when an event happens?
  - A file uploaded in Cloud Storage
  - An error log is written to Cloud Loggin
  - A message arrives to Cloud Pub/Sub
- With Cloud functions
  - Run code in response to events
    - Write your business logic in Node.js, Python, Go, Java, .NET, Ruby
    - Don't worry about servers or scaling or availability (only worry about your code)
  - Pay only for what you use
    - Number of invocations
    - Compute Time of the invocations
    - Amount of memory and CPU provisioned
  - Time Bound (Default 1 min and MAX 9 minutes (540 seconds))
  - Each execution runs in a separate instance
    - No direct sharing between invocations

***Cloud Run & Cloud Run for Anthos
- It is for 'Container to Production in Seconds'
- Once the service name and region while creating a Cloud Run service, they cannot be changed afterwards
- Cloud run is built on top of an open standard 'Knative'
  - Fully managed serverless platform for containerized applications
    - ZERO infrastructure management
    - Pay-per-use (For used CPU, Memory, Requests and Networking)
- Fully integrated end-to-end developer experience
  - No limitations in languages, binaries and dependencies
  - Easily portable because of container based architecture
  - Cloud Code, Cloud Build, Cloud Monitoring & Cloud Loggin Integrations
- Anthos - Run kubernetes clusters anywhere
  - Cloud, Multi Cloud and On-Premise
- Cloud Run for Anthos
  - Can deploy workloads to anthos clusters running on-premises or on Google Cloud

***Scenarios - GCP Compute Services
- How do you create Virtual Machines in Google Cloud?
  - Compute Engine
- How do you create a group of similar VMs?
  - Managed Instance Groups
- How do you distribute load among VMs?
  - Cloud Load Balancing
- How do you simplify setting up your web applications?
  - App Engine
- What is the easiest way to run one container?
  - Google Cloud Run (or App Engine Flexible)
- How do you orchestrate containers?
  - Google Kubernates Engine (GKE)
- How do you build serverless event driven functions?
  - Cloud Functions
- How can you centrally manage multi-cloud and on-premise kubernates clusters?
  - Anthos

***Storage Types - Block Storage and File Storage
- What is the type of storage of your hard disk?
  - Block Storage
- You've created a file share to share a set of files with your colleagues in a enterprise. What type of storage are you using?
  - File Storage
- Block Storage
  - Harddisks are attached to your computers
  - Typically, one block storage device can be connected to one virtual server
    - (Exceptions) You can attach read only block devices with multiplle virtual servers and certain cloud providers are exploring multi-writer disks as well!
  - You can connect multiple different block storage devices to one virtual server
  - Used as
    - Direct-attached storage (DAS) - Similar to a hard disk
    - Storage Area Network (SAN) - High-speed network connecting a pool of storage devices
      - Used by Databases - Oracle and Microsoft SQL Server
- File Storage
  - Media workflows need huge shared storage for supporting processes like video editing
  - Enterprise users need a quick way to share files in a secure and organized way
  - These file shares are shared by several virtual servers
- GCP - Block Storage and File Storage
 - Block Storage
   - Persistent Dists: Network Block Storage
     - Zonal: Data replicated in one zone
     - Regional: Data replicated in multiple zones
   - Local SSDs: Local Block Storage
 - File Storage
   - Filestore: High performance file storage

***Object Storage - Cloud Storage
- Most popular, very flexible & inexpensive storage service
  - Serverless: Autoscaling and infinite scale
- Store large objects using a key-value approach
  - Treats entire object as a unit (Partial updates not allowed)
    - Recommended when you operate on entire object most of the time
    - Access Control at Object level
  - Also called Object Storage
- Provides REST API to access and modify the objects
  - Also provides CLI (gsutil) & Client Libraries (C++, C#, Java, Node.js, PHP, Python & Ruby)
- Store all file types - text, binary, backup & archives
  - Media files and archives, Application packages and logs
  - Backups of your databases or storage devices
  - Staging data during on-premise to cloud database migration
- Storage Classes
  - Different kinds of data can be stored in Cloud Storage
    - Media files and archives
    - Application packages and logs
    - Backups of your databases or storage devics
    - Long term archives
  - Huge variations in access patterns
  - (Question) Can I pay a cheaper price for objects I access less frequently?
    - Storage classes help to optimize your costs based on your access needs
  - Standard (STANDARD)
    - No minimum storage duration
    - TMA (Typical Monthly Availability) - > 99.99% in multi region and dual region, 99.99% in regions
    - Frequently used data/Short period of time
  - Nearline storage (NEARLINE)
    - 30 days of minimum storage duration
    - TMA - 99.95% in multi region and dual region, 99.9% in regions
    - Read or modify once a month on an average
  - Coldline storage (COLDLINE)
    - 90 days of minimum storage duration
    - TMA - 99.95% in multi region and dual region, 99.9% in regions
    - Read or modify at most once a quarter
  - Archive storage (ARCHIVE)
    - 365 days of minimum storage duration
    - TMA - 99.95% in multi region and dual region, 99.9% in regions
    - Less than once a year
- Features across Storage Classes
  - High durability (99.999999999% annual durability)
  - Low latency (first byte typically in tens of milliseconds)
  - Unlimited storage
  - Autoscaling (No configuration needed)
  - NO minimum object size
- Same APIs across storage classes
- Committed SLA is 99.95% for mutli region or dual-region location and 99.9% for single region for Standard, Nearline and Coldline storage classes
  - >= 99.0% of commited SLA is for Nearline, Coldline, or Archive  storage class in a regional location of Cloud Storage
    - Durable Reduced Availability storage class in any locatio of Cloud Storage

***Object Lifecycle Management
- Files are frequently accessed when they are created
  - Generally usage reduces with time
  - (Question) How do you save costs by moving files automatically between storage classes?
    - (Solution) Object Lifecycle Management
- Identify objects using conditions based on:
  - Age, CreatedBefore, isLive, MatchesStorageClass, NumberOfNewVersions, etc.
  - Set multiple conditions: all conditions must be satisfied for action to happen
- Two kinds of actions:
  - SetStorageClass actions (change from one storage class to another)
  - Deletion actions (delete objects)
- Allowed Transitions:
  - (Standard or Multi-Regional or Regional) to(Nearline or Coldline or Archive)
  - Nearline to (Coldline or Archive)
  - Coldline to Archive
{
  "lifecycle": {
    "rule": [
      {
        "action": { "type": "Delete" },
        "condition": { 
          "age": 30,
          "isLive": true,
        }
      },
      {
        "action": {
          "type": "SetStorageClass",
          "storageClass": "NEARLINE",
        },
        "condition": {
          "age": 365,
          "matchesStorageClass": ["STANDARD"]
        }
      }
    ]
  }
}

***Transferring data from on-premises to cloud
- Most popular data destination is Google Cloud Storage
- Options:
  - Online Transfer: Use gsutil or API to transfer data to Google Cloud Storage
  - Storage Transfer Service: Recommended for large-scale (petabytes) online data transfers from your private data centers, AWS, Azure, and Google Cloud
    - You can set up a repeating schedule
    - Supports incremental transfer (only transfer changed objects)
    - Reliable and fault tolerant - continues from where it left off in case of errors
  - Storage Transfer Service vs gsutil:
    - gsutil is recommended only when you are transferring less than 1 TB from on-premises or another GCS bucket
    - Storage Transfer Service is recommended if either of the conditions is met:
      - Transferring more than 1 TB from anywhere
      - Transferring from another cloud
- Migrating Data with Transfer Appliance
  - Transfer Appliance: Copy, ship and upload data to GCS
    - Recommended if your data size is greater than 20TB
      - OR online transfer takes > 1 week
    - Process
      - Request an appliance
      - Upload your data
      - Ship the appliance back
      - Google uploads the data
    - Fast copy (upto 40Gbps)
    - AES 256 encryption - Customer-managed encryption keys
    - Order multiple devices (TA40, TA300) if need

***Storage in Google Cloud - Scenarios
- My team requires a shared space for collaborating on media projects that involve large files
  - Filestore (File Storage)
- I am looking for a cost-effective solution to store and serve a large amount of unstructured data (Videos, Music, Files) globally
  - Cloud Storage (Object Storage)
- I want to ensure that my data is automatically managed and transitioned between storage classes to reduce costs without manual intervention
  - Object Lifecycle Management in Cloud Storage
- For a massive, one-time migration of data to cloud, where online transfer is not feasible due to size and time constraints
  - Using Transfer Appliance for large-scale, physical data migration

***Database Categories
- There are several categories of databases
  - Relational (OLTP and OLAP), Document, Key Value, Graph, In Memory among others
- Choosing type of database for your use case is not easy. A few factors:
  - Do you want a fixed schema?
    - Do you want flexibility in defining and changing your schema? (schemaless)
  - What level of transaction properties do you need? (atomicity and consistency)
  - What kind of latency do you want? (seconds, milliseconds or microseconds)
  - How many transactions do you expect? (hundreds or thousands or millions of transactions per second)
  - How much data will be stored? (MBs or GBs or TBs or PBs)
  - and a lot more...

***Relational Databases
- This was the only option until a decade back!
- Most popular (or unpopular) type of databases
- Predefined schema with tables and relationships
- Very strong transactional capabilities
- Used for
  - OLTP (Online Transaction Processing) use cases
  - OLAP (Online Analytics Processing) use cases
- OLTP
  - Applications where large number of users make large number of small transactions
  - Use cases:
    - Most traditional applications, ERP, CRM, e-commerce, banking applications, etc.
  - Popular databases
    - MySQL, Oracle, SQL Server, etc.
  - Recommended Google Managed Services:
    - Cloud SQL: Supports PostgreSQL, MySQL, and SQL Server for regional relational databases (upto a few TBs)
gcloud config set project project-id
gcloud sql connect database-name --user=root --quiet
    - Cloud Spanner: Unlimited scale (multiple PBs) and 99.999% availability for global applications with horizontal scaling
- OLAP
  - Applications allowing users to analyze petabytes of data
    - Examples: Reporting applications, Data ware houses, Business intelligence applications, Analytics systems
    - Sample application: To decide insurance premiums analyzing data from last hundred years
    - Data is consolidated form multiple (transactional) databases
  - Recommended GCP Managed Service
    - BigQuery: Petabyte-scale distributed data ware house
- OLAP vs OLTP
  - OLAP and OLTP use similar data structures
  - But very different approach in how data is stored
  - OLTP databases use row storage
    - Each table row is stored together
    - Efficient for processing small transactions
  - OLAP databases use columnar storage
    - Each table column is stored together
    - High compression - store petabytes of data efficiently
    - Distribute data - one table in multiple cluster nodes
    - Execute single query across multiple nodes - Complex queries can be executed efficiently

***NoSQL Databases
- New approach (actually NOT so new!) to building your databases
  - NoSQL = not only SQL
  - Flexible schema
    - Structure the way your application needs it
    - Let the schema evolve with time
  - Horizontally scale to petabytes of data with millions of TPS
  - Not a 100% accurate generalization but a great starting point
    - Typical NoSQL databases trade-off "Strong consistency and SQL features" to achieve "scalability and high-performance"
- Google Managed Services:
  - Cloud Firestore (Datastore)
  - Cloud BigTable
- Cloud Firestore
  - Managed serverless NoSQL document database
    - Provides ACID transactions, SQL-like queries, indexes
      - Designed for transactional mobile and web applications
    - Firestore (next version of Datastore) adds:
      - Strong consistency
      - Mobile and Web-client libraries
    - Recommended for small to medium databases (0 to a few Terabytes)
- Cloud BigTable - Managed, scalable NoSQL wide column database
  - NOT serverless (You need to create instances)
  - Recommended for data size > 10 Terabytes to several Petabytes
  - Recommended for large analytical and operational workloads:
    - NOT recommended for transactional workloads (Does not support multi row transactions - supports only single-row transactions)

***In-memory Databases
- Retrieving data from memory is much faster than retrieving data from disk
- In-memory databases like Redis deliver microsecond latency by storing persistent data in memory
- Recommended GCP Managed Service
  - Cloud Memorystore
- Use cases: Caching, session management, gaming leader boards, geospatial applications

***Databases - Scenarios
- A start up with quickly evolving schema (table structure)
  - Cloud Datastore/Firestore
- Non relational db wiith less storage (10 GB)
  - Cloud Datastore
- Transactional global database with predefined schema needing to process millions of transactions per second
  - Cloud Spanner
- Transactional local database processing thousands of transactions per second
  - Cloud SQL
- Cache data (from database) for a web application
  - Memorystore
- Database for analytics processing of petabytes of data
  - BigQuery
- Database for storing huge volumes stream data from IOT devices
  - BigTable
- Database for storing huge streams of time series data
  - BigTable

***Security Threats
- Ransomeware: Lock up your company's files and demand money to unlock them
- Phishing Scams: Trick emails that look real but aim to steal your information
- Insider Threats: Disgruntled employees might take or leak confidential info, hurting your business from the inside
- Malware Attacks: Harmful software that sneaks into your systems to steal data or cause damage
- DDoS Attacks: Attack your website with traffic until it crashes
- Data Breaches: When someone unauthorized gets into your systems and steals sensitive information
- Cloud Vulnerabilites: Weakness in cloud services configuration can expose your data

***Security Today - Scenarios
- An employee opens an invoice attached to an email that seems to come from a known vendor. This action installs software that encrypts all the data on their computer, and a message appears demanding payment to unlock the files
  - Ransomeware
- You receive an email that looks like it's from your bank, asking you to update your login details via a link. The link leads to a fake website that collects your username and password when you try to log in
  - Phishing Scams
- A former employee, still holding grudges, uses their still-active login credentials to access and download customer data, which they then leak online
  - Insider Threats
- While browsing the internet, an employee clicks on a seemingly harmless link, which downloads a program ontoo their computer without their knowledge. This program starts sending sensitive information to a cybercriminal
  - DDoS Attacks

***Typical identity management in the cloud
- You have resources in the cloud (examples - virtual server, a database, etc.)
- You have identities (human and non-human) that need to access those resources and perform actions
  - For example: launch (stop, start or terminate) a virtual server
- How do you identify users in the cloud?
  - How do you configure resources they can access?
  - How can you configure what actions to allow?
- In GCP: Identity and Access Management (Cloud IAM) provides this service

***Cloud Identity and Access Management (IAM)
- Authentication (is it the right user?) and
- Authorization (do they have the right access?)
- Identities can be 
  - A GCP User (Google Account or Externally Authenticated User)
  - A Group of GCP Users
  - An Application running in GCP
  - An Application running in your data center
  - Unauthenticated users
- Provides very granular control
  - Limit a single user:
    - to perform single action
    - on a specific cloud resource
    - from a specific IP address
    - during a specific time window

***Cloud IAM Example
- I want to provide access to manage a specific cloud storage bucket to a colleague of mine:
  - Important Generic Concepts:
    - Member: My colleague
    - Resource: Specific cloud storage bucket
    - Action: Upload/Delete Objects
  - In Google Cloud IAM:
    - Roles: A set of permissions (to perform specific actions on specific resources)
      - Roles do NOT know about members. It is all about permissions!
    - How do you assign permissions to a member?
      - Policiy: You assign (or bind) a role to a member
- Process
  - Choose a Role with right permissions (Ex: Storage Object Admin)
  - Create Policy binding member (your friend) with role (permissions)
  - IAM in AWS is very different from GCP (Forget AWS IAM & Start FRESH!)

***IAM - Roles
- Roles are Permissions
  - Perform some set of actions on some set of resources
- Three Types:
  - Basic Roles (or Primitive roles) - Owner/Editor/Viewer
    - Viewer(roles.viewer) - Read-only actions
    - Editor(roles.editor) - Viewer + Edit actions
    - Owner(roles.owner) - Editor + Manage Roles and Permissions + Billing
    - EARLIEST VERSION: Created before IAM
    - NOT RECOMMENDED: Don't use in production
  - Predefined Roles - Fine grained roles predefined and managed by Google
    - Different roles for different purposes
    - Examples: Storage Admin, Storage Object Admin, Storage Object Viewer, Storage Object Creator
  - Custom Roles - When predefined roles are NOT sufficient, you can create your own custom roles

***Service Accounts
- Scenario: An Application on a VM needs access to cloud storage
  - You DONT want to use personal credentials to allow access
- (RECOMMENDED) Use Service Accounts
  - Identified by an email address (Ex: id-compute@developer.gserviceaccount.com)
  - Service account types:
    - Default service account - Automatically created when some services are used
      - (NOT RECOMMENDED) Has Editor role by default
    - User Managed - User created
      - (RECOMMENDED) Provides fine grained access control
    - Google-managed service accounts - Created and managed by Google
      - Used by GCP to perform operations on user's behalf
      - In general, we DO NOT need to worry about them
gsutil mb gs://new-bucket-name

