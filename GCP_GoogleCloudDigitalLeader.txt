***What is Cloud and Why do we need Cloud?
- Online shopping applications typically have peak usage during holidays and weekends.
  - They would have a lot of load on the application and rest of the time, there are low loads.
- The solution before the cloud was to do peak load provisioning.
  - Peak load provisioning refers to buy/procure infrastructure to support that kind of load.
  - (Question) What would that infrastructure be doing during periods of low loads?
    - It would just be sitting idle.
  - Disadvantages:
    - High cost of procuring infrastructure.
    - Needs ahead of time planning ((Question) Can you guess the future?).
    - Low infrastructure utilization (PEAK LOAD provisioning).
    - Dedicated infrastructure maintenance team ((Question) Can a startup afford it?).
- Silver Lining in the Cloud
  - (Question) How about provisioning (renting) resources when you want them and releasing them back when you do not need them?
    - On-demand resource provisioning.
    - Also called Elasticity
- Cloud Advantages
  - Trading 'capital expence' for 'variable expense'.
  - Benefiting from massive economies of scale.
  - No need to guess capacity any more.
  - No need to spend money running and maintaining data centers.
  - Can go Global in minutes.

***Google Cloud Platform
- One of the Top 3 cloud service providers
- Provides a number of services (200+)
- Reliable, secure and highly-performant:
  - Infrastructure that powers 8 services with over 1 Billion Users:
    - Gmail, Google Search, Youtube, etc.
- Cleanest Cloud
  - Net carbon-neutral cloud (electricity used matched 100% with renewable energy)
- Cloud applications make use of multiple GCP services

***Regions and Zones
- (Question) What if an application is deployed in a data center in London?
  - What would be the challenges?
    - Slow access for users from other parts of the world (high latency).
    - What if the data center crashes?
      - The application goes down (low availability).
      - A solution would be adding one more data center in London.
      - Challenges would be
        - Slow access for users from other parts of the world.
        - (Question) What if one data center crashes? (Solved)
        - What if entire region of London is unavailable?
          - The application goes down.
  - Another solution would be deploying in a new region (Say Mumbai)
    - What would be the challenges?
      - Comparably faster than before but still slow access for users from other parts of the world.
        - This can be solved completely by adding deployments for the application in other regions.
      - Even if one data center crashes, the others are available from other regions.
- Setting up data centers in different regions around the world is not easy.
  - (Solution) Google provides 20+ regions around the world (expanding every year).
- Region refers to specific geographical location to host the resources.
- Advantages
  - High Availability.
  - Low latency (Servers can be served from the nearest available region)
  - Global Footprint (A startup in a specific region might be able to easily deploy applications to multiple parts of the world. Therefore, it can create global applications.)
  - Adhere to government regulations
    - Different countries have different regulations.
    - Say US wants the data related to all their citizens, to reside within US only.
      - In those kind of situations, a region can be created in US and store data related to US customers only in that specific region.
- (Question) How to achieve high availability in the same region (or geographic location)?
  - (Solution) Each region has three or more zones.
  - Advantages are increased availability and fault tolerance within same region.
  - (Note) Each zone has one or more discrete clusters
    - Cluster is a distinct physical infrastructure that is housed in a data center.
  - (Note) Zones in a region are connected through low-latency links.
  - New regions and zones are constantly added.
  - An example is as below
```
Region Code	Region					Zones	Zones List
us-west1	The Dalles, Oregon, North America	3	us-west1-a
								us-west1-b
								us-west1-c
europe-north1	Hamina, Finland, Europe			3 	europe-north1-a
								europe-north1-b
								europe-north1-c
asia-south1	Mumbai, India APAC			3	asia-south1-a
								asia-south1-b
								asia-south1-c
```

***Google Compute Engine (GCE)
- In corporate data centers, applications are deployed to physical servers.
- (Question) Where do you deploy applications in cloud?
  - Rent virtual servers.
  - Virtual Machines - Virtual servers in GCP.
  - Google Compute Engine (GCE) - Provision & Manage Virtual Machines.
- Features
  - Create and manage(start, stop, restart, or terminate) lifecycle of Virtual Machine (VM) instances.
  - Load balancing and auto scaling of multiple VM instances.
  - Attach storage (&network storage) to VM instances.
  - Manage network connectivity and configuration for VM instances.
- Goal (Optional)
  - Setup VM instances as HTTP (Web) Server.
  - Distribute load with Load Balancers.

***Hands-on for Computer Engine
- To create a few VM instances and play with them.
- To checkout the lifecycle of VM instances.
- To use SSH to connect to VM instances.

***IP Addresses - Virtual Machines
- An IP Address (short for Internet Protocal address) is a unique string of numbers separated by periods or colons that identifies each device connected to a computer network that uses the Internet Protocol for communication.
- Internal IP Address is a permanent internal ip address that does not change during the lifetime of an instance
  - It can only be used inside the specific network.
- External or Ephemeral IP Address changes when an instance is stopped
- Static IP Address is a permanent external ip address that can be attached to a VM.
- Static IP Addresses when built and not used needs to be released (otherwise, it will be billed).

***Simplifying VM HTTP server setup
- (Question) How do we reduce the number of steps in creating a VM instance and setting up a HTTP Server?
- Some of the options are:
  - Startup script
  - Instance Template
  - Custom Image
- (Question) How to use a startup script?
  - The process of installing any software or patches when a VM instance is launched is called Bootstrapping.
  - In VM, startup script can be configured to bootstrap.
- (Question) Why do you need to specify all the VM instance details (Image, instance type, etc.) every time you launch an instance?
  - How about creating an Instance template?
  - Define machine type, image, labels, startup script and other properties.
- Instance templates are used to create VM instances and managed instance groups
  - It provides a convenient way to create similar instances.
  - An instance template cannot be updated. To make a change, it needs to be copied and modified.
- Reducing launch time with custom image
  - Installing OS patches and software at luanch of VM instances increases boot up time.
  - (Question) How about creating a custom image with OS patches and software pre-installed?
    - Can be created from an instance, a persistent disk, a snapshot (copy of a persistent disk), another image, or a file in Cloud Storage.
    - Can be shared across projects
    - (Recommendation) Deprecate old images (& specify replacement image)
    - (Recommendation) Hardening an image - Customize images to (adhere to) the corporate security standards.
  - Custom Images preferred over startup scripts.
  - Disks are hard disks that are associated with the VMs.

***Minimizing Costs
- Sustained use discounts
  - Automatic discounts for running VM instances for significant portion of the billing month.
    - Example: If you use N1, N2 machine types for more than 25% of a month, you get a 20% to 50% discount on every incremental minute.
    - Discount increases with usage (graph).
    - No action required on our part! (Automatically appied by the Platform).
  - Applicable for instances created by Google Kubernetes Engine and Compute Engine.
  - Does NOT apply on certain machine types (example: E2 and A2).
  - Does NOT apply to VMs created by App Engine flexible and Dataflow.
- Committed use discounts (needs a commitment from user)
  - For workloads with predictable resource needs
  - Commit for 1 year or 3 years
  - Up to 70% discount based on machine type and GPUs
  - Applicable for instances created by Google Kubernetes Engine and Compute Engine
  - (Note) You CANNOT cancel commitments
    - Reach out to Cloud Billing Support if you made mistake while purchasing commitments.
- Preemptible VM
  - Short-lived cheaper (upto 80%) compute instances
    - Can be stopped by GCP any time (preempted) within 24 hours.
  - Instances get 30 second warning (to save anything they want to save)
  - Cases when Preemptible VM's are used:
    - When applications are fault tolerant
    - When cost is the primary factor
    - When workload is NOT immediate
    - Example: Non immediate batch processing jobs
  - Restrictions
    - Not always available.
    - No SLA (Service Level Agreement) and Cannot be migrated to regular VMs.
    - No Automatic Restarts.
    - Free Tier credits not applicable.
- Spot VMs (Latest version of Preemptible VMs)
  - Key difference is that Spot VMs does not have a maximum runtime.
    - Compared to traditional preemptible VMs which have a maximum runtime of 24 hours.
  - Other features similar to traditional preemptible VMs
    - May be reclaimed at any time 30-second notice.
    - NOT always available.
    - Dynamic Pricing: 60-91% discount compared to on-demand VMs.
    - Free Tier credits not applicable.

***Sole Tenant Nodes
- Shared Tenancy (Default)
  - Single host machine can have instances from multiple customers.
- Sole Tenant Nodes are virtualized instances on hardware dedicated to one customer.
- Use cases:
  - Security and compliance requirements: You want your VMs to be physically separated from those in other projects.
  - High performance requirements: Group your VMs together.
  - Licensing requirements: Using per-core or per-processor "Bring your own licenses"

***Custom Machine Types
- (Question) What do you do when predefined VM options are NOT appropriate for your workload?
  - Create a machine type customized to your needs (a Custom Machine Type).
- vCPUs, memory and GPUs can be adjusted with custom machine types.
  - Choose between E2, N2, or N1 machine types
  - Supports a wide variety of Operating Systems: CentOS, CoreOS, Debian, Red Hat, Ubuntu, Windows, etc.
  - Billed per vCPUs, memory provisioned to each instance
    - Example: Hourly Price: $0.033174 / vCPU + $0.004446 / GB

***GCE - VM Costs
- 2 primary costs in running VMs using GCE:
  - 1: Infrastructure cost to run our VMs
  - 2: Licensing cost for your OS (ONLY for Premium Images)
    - Premium Image Examples: Red Hat Enterprise Linux (RHEL), SUSE Linux Enterprise Server (SLES), Ubuntu Pro, Windows Server, ..
  - Options For Licensing:
    - 1: You can use Pay-as-you-go model (PAYG) OR
    - 2: (WITHIN A LOT OF CONSTRAINTS) You can use your existing license/subscription (Bring your own subscription/license - BYOS/BYOL)
- (RECOMMENDED) if you have existing license for a premium image, use it while your license is valid
  - After that you can shift to Pay-as-you-go model (PAYG)

***Quick Review
- Image
  - What operating system and what software do you want on the VM instance?
  - Reduce boot time and improve security by creating custom hardened images.
  - You can share an image with other projects.
- Machine Types
  - Optimized combination of compute (CPU, GPU) memory, disk (storage) and networking for specific workloads.
  - You can create your own Custom Machine Types when existing ones you don't fit to your needs.
- Static IP Addresses: Get a constant IP addresses for VM instances.
- Instance Templates: Pre-configured templates simplifying the creation of VM instances.
- Sustained use discounts: Automatic discounts for running VM instances for significant portion of the billing month.
- Committed use discounts: 1 year or 3 year reservations for workloads with predictable resource needs.
- Preemptible VM: Short-lived cheaper (upto 80%) compute instances for non-time-critical fault-tolerant workloads.

***GCE - Scenarios
- I want to ensure my VM runs a specific operating system and software stack for mu application - Custom Image
- I need to optimize my VM for a specialized workload required a unique mix of CPU, memory, and storage - Custom Machine Types
- My application requires a fixed IP address that doesn't change between reboots or reassignments - Static IP Addresses
- I have predictable resource needs and want to commit to a 1 or 3-year plan to enjoy deeper discounts - Committed Use Discounts
- I need to run short-lived, fault-tolerant workloads that can tolerate interruptions in exchange for lower costs - Committed Use Discounts
- I need to run short-lived, fault-tolerant workloads that can tolerate interruptions in exchange for lower costs - Preemptible VMs

***Instance Groups
- (Question) How do you create a group of VM instances?
  - Instance Group - Group of VM instances managed as a single entity.
- Two types of instance groups:
  - Managed: Identical VMs created using a instance template.
    - Features: Auto scaling (based on the number of users using the instance group you can scale the number of number of computing instances up and down), auto healing (you can configure a health check and if the health check fails, that specific instance would be automatically replaced with a new instance), and managed releases (you can go from one version to another without any down time.)
  - Unmanaged: Different configuration for VMs in same group.
    - Does NOT offer auto scaling, auto healing & other services.
    - Not Recommended unless you need different kinds of VMs.
- Location can be Zonal or Regional
  - Regional gives you higher availability (RECOMMENDED).
- Managed Instance Groups (MIG)
  - Identical VMs created using an instance template.
  - Important features:
    - Maintain certain number of instances 
      - If an instance crashes, MIG launches another instance.
    - Detect application failures using health checks (self healing)
    - Increase and decrease instances based on load (auto scaling)
    - Able to add load balancer to distribute load
    - Create instances in multiple zones (regional MIGs)
      - Regional MIGs provide higher availability compared to zonal MIGs.
    - Release new application versions without downtime.
      - Rolling updates: Release new version step by step (gradually). Update a percentage of instances to the new version at a time.
      - Canary Deployment: Test new version with a group of instances before releasing it across all instances.
- Creating Managed Instance Group
  - Instance template is mandatory
  - Configure auto-scaling to automatically adjust number of instances based on load:
    - Minimum number of instances
    - Maximum number of instances
    - Autoscaling metrics: CPU Utilization target or Load Balancer Utilization target or Any other metric from Stack Driver
      - Cool-down period: How long to wait before looking at auto scaling metrics again.
      - Scale In Controls: Prevent a sudden drop in no of VM instances
        - Example: Don't scale in by more than 10% or 3 instances in 5 minutes.
      - Autohealing: Configure a Health check with initial delay (how long should you wait for your app to initialize before running a health check?)

***GCP - Cloud Load Balancing
- Helps distribute traffic across VM instances in one or more regions.
- Managed service:
  - Google Cloud ensures that it is highly available
  - Auto scales to handle huge loads
  - Load Balancers can be public or private
- Types:
  - External HTTP(S)
  - Internal HTTP(S)
  - SSL Proxy
  - TCP Proxy
  - External Network TCP/UDP
  - Internal TCP/UDP

***Managed Services
- (Question) Do you want to continue running applications in the cloud, the same way you run them in your data center?
  - Or, are there other approaches?
- Some terminology used with cloud services:
  - IaaS (Infrastructure as a Service)
  - PaaS (Platform as a Service)
  - FaaS (Function as a Service)
  - CaaS (Container as a Service)
  - Serverless
  - more..
***IAAS (Infrastructure as a Service)
- Use only infrastructure from cloud provider
- Example: Using VM to deploy your applications or databases
- You are responsible for:
  - Application Code and Runtime
  - Configuring load balancing
  - Auto scaling
  - OS upgrades and patches
  - Availability
  - etc.. (and a lot of things!)
```
Applications (Manually setup by User)
Application Runtime (Manually installed by User)
OS (Installed by User)
Virtualization (Managed by Cloud)
Physical Hardware (Provided by Cloud)
Networking (Provided by Cloud)
```

***PAAS (Platform as a Service)
-Use a platform provided by cloud
- Cloud provider is responsible for:
  - OS (incl. upgrades and patches)
  - Application Runtime
  - Auto scaling, Availability & Load balancing, etc.
- You are responsible for:
  - Configuration (of Application and Services)
  - Application code (if needed)
- Examples:
  - Google App Engine
  - Azure App Service
- Varieties:
  - CAAS (Container as a Service): Containers instead of Apps
  - FAAS (Function as a Service): Functions instead of Apps
  - Databases - Relational & NoSQL (Amazon RDS, Google Cloud SQL, Azure SQL Database etc.), Queues, AI, ML, Operations, etc.
```
Applications (Configured by User)
Application Runtime (Installed by Cloud)
OS (Installed by Cloud)
Virtualization (Managed by Cloud)
Physical Hardware (Provided by Cloud)
Networking (Provided by Cloud)
```

***Microservices
- Enterprises are heading towards microservices architectures
  - Build small focused microservices
    - Flexibility to innovate and build applications in different programming languages (Go, Java, Python, JavaScript, etc.)
- But deployments become complex!
- (Question) How can we have one way of deploying Go, Java, Python or JavaScript, etc. microservices?
  - (Solution) Enter containers
  - One of the popular container related tools is Docker
    - Create Docker images for each microservice
    - Docker image has all needs of a microservice:
      - Application Runtime (JDK or Python or NodeJS)
      - Application code and Dependencies
- Some of the services of containers provided by Cloud are ECS (Elastic Container Service) by AWS, Cloud Run by GCP, etc.
- Runs the same way on any infrastructure:
  - Your local machine
  - Corporate data center
  - Cloud
- Advantages
  - Docker containers are light weight
    - Compared to Virtual Machines as they do not have a Guest OS
  - Docker provides isolation for containers
  - Docker is cloud neutral (an image can be run on any cloud provider such as AWS, Azure, Google Cloud, etc.)

***Container Orchestration
  - (Case Study) Requirement: I want 10 instances of Microservice A container, 15 instances of Microservice B container and ...
  - One of the popular container orchestration services is Kubernetes, and all the cloud providers provide Kubernetes services such as EKS (Elastic Kubernetes Service) by AWS, AKS (Azure Kubernetes Service) by Azure, GKE (Google Kubernetes Engine) by GCP), etc.
  - Typical Features
    - Auto Scaling - Scale containers based on demand
    - Service Discovery - Help microservices find one another
      - Do not need to hardcode URL of one microservice from other microservices
      - Each microservice can ask the container orchestrator for the location of other microservices
    - Load Balancer - Distribute load among multiple instances of a microservice
    - Self Healing - Do health checks and replace failing instances
    - Zero Downtime Deployments - Release new versions without downtime

***Serverless
- What do we think about when we develop an application?
  - Where to deploy? What kind of server? What OS?
  - How do we take care of scaling and availability of the application?
- What if you don't need to worry about servers and focus on your code?
  - Enter Serverless
    - (Note) Serverless does not mean No Servers
    - It means the servers are not visible to you (on which your code is running)
  - Features
    - You don't have worry about infrastructure (ZERO visibility into infrastructure)
      - Flexible scaling and automated high availability
    - Most Important: Pay for use
      - Ideally, zero requests means zero cost
    - You focus on code and the cloud managed service takes care of all that is needed to scale your code to serve millions of requests!
    - And you pay for requests and not servers!
- Some of the examples
  - All the FAAS (Function as a Service) services
  - AWS Lambda in AWS
  - Azure Functions in Azure
  - Google Functions in GCP

***SAAS (Software as a Service)
- Centrally hosted software (mostly on the cloud)
  - Offered on a subscription basis (pay-as-you-go)
  - Examples:
    - Email, calendaring & office tools (such as Outlook 365, Microsoft Office 365, Gmail, Google Docs), etc.
    - Customer relationship management (CRM), enterprise resource planning (ERP) and document management tools, etc.
  - The users of these services do not need to worry about any of the details behind the software or hardware or the applications that are used to run these applications. They do not need to know how the applications are built.
- Cloud provider is responsible for:
  - OS (incl. upgrades and patches)
  - Application Runtime
  - Auto scaling, Availability & Load balancing, etc.
  - Application code and/or
  - Application Configuration (How much memory? How many instances?..)
- Customer is responsible for:
  - Configuring the software!

***Shared Responsibility Model
- Security in cloud is a Shared Responsibility
  - Between GCP and the Customer
- GCP provides features to make security easy:
  - Encryption at rest by default
  - IAM
  - KMS
  - more..
- Customer responsibility vary with model:
```
Responsibilities		IaaS	PaaS	SaaS
-----------------------------------------------------
Content				User	User	User
Access policies			User	User	User
Usage				User	User	User
Deployment			User	User	Cloud
Web application security	User	User	Cloud
Identity			User	Cloud	Cloud
Operations			User	Cloud	Cloud
Access and authentication	User	Cloud	Cloud
Network security		User	Cloud	Cloud
Guest OS, data & content	User	Cloud	Cloud
Audit logging			Cloud	Cloud	Cloud
Network				Cloud	Cloud	Cloud
Storage + encryption		Cloud	Cloud	Cloud
Hardened Kernel + IPC		Cloud	Cloud	Cloud
Boot				Cloud	Cloud	Cloud
Hardware			Cloud	Cloud	Cloud
```
- Google Cloud is always responsible for Hardware, Network, Audit Logging, etc.

***Managed Services for Compute
- Compute Engine
  - High-performance and general purpose VMs that scale globally
  - IaaS
- Google Kubernetes Engine
  - Orchestrate containerized microservices on Kubernetes
  - Needs advanced cluster configuration and monitoring
    - You create a cluster and the cluster contains a number of nodes or number of instances
    - You deploy your microservices using Kubernetes into the cluster
  - CaaS
  - It is recommended for complex microservices architectures.
- App Engine
  - Build highly scalable application on a fully managed platform using open and familiar languages and tools
  - PaaS (CaaS, Serverless)
  - Serverless is possible when mode is App Engine standard
- Cloud Functions
  - Build event driven application using simple, single-purpose functions
  - This is a true serverless service from GCP
  - FaaS (Serverless)
  - Use Cases
    - if you want to do something immediately as soon as there is a message on the queue, you can create a cloud function to listen on the queue and react to it.
    - if you want to do something as soon as an object is uploaded into cloud storage, you can do that using a cloud function.
- Cloud Run
  - Develop and deploy highly scalable containerized applications.
    - Does NOT need a cluster unlike Kubernetes Engine
  - CaaS (Serverless)
  - It is recommended for simpler architectures.

***App Engine
- Simplest way to deploy and scale applications in GCP
  - Provides end-to-end application management
- Supports:
  - Go, Java, .NET, Node.js, PHP, Python, Ruby using pre-configured runtimes
  - Use custom run-time and write code in any language as it supports running containers
  - Connect to variety of Google Cloud storage product (Cloud SQL, Object Storage (or Cloud Storage) etc.)
    - You can also talk to a queue 
  - No usage charges for App Engine itself - But pay for resources provisioned
    - if you have provision compute instances through app engine, then you'd pay for those
  - Features
    - Automatic load balancing & Auto scaling
    - Managed platform updates & Application health monitoring
    - Application versioning
    - Traffic splitting
      - You can have any number of versions of application and can split the traffic between them
      - Say you may want to send 30% of traffic to the latest version and 70% to v3 or some other versions.

***Compute Engine vs App Engine
- Compute Engine
  - IaaS
  - More Flexibility
  - More Responsibility
    - Choosing Image
    - Installing Software
    - Choosing Hardware
    - Fine grained Access/Permissions (Certificates/Firewalls)
    - Availability, etc.
- App Engine
  - PaaS
  - Serverless
  - Lesser Responsibility
  - Lower Flexibility
    - If you'd want to add a GPU, you cannot do that with an App Engine
- Use Case
  - If you have a simple Java application or Python application or a containerized application already present, and want to easily deploy that to cloud, then App Engine might be the right option. 

***App Engine Environments
- There are two different types of environments which are offered by App Engine
  - Standard
  - Flexible
- Standard
  - Applications run in language specific sandboxes
    - V1: Java, Python, PHP, Go (Old versions)
    - V2: Java, Python, PHP, Ruby, Go (Newer versions)
  - Complete isolation from OS/Disk
  - There is no need to worry about creating instances, instance groups, or managing load balancing or scaling, etc.
  - Only code and app engine configuration needs to be provided, and all other important features are provided by app engine
  - Supports scale down to zero instances.
    - To reduce the cost
- Flexible - Application instances run within Docker containers
  - Makes use of Compute Engine virtual machines
  - Anything for which you can create a Docker container image, you can provide that image as an input to flexible and flexible can run it for you.
  - Support ANY runtime (with built-in support for Python, Java, Node.js, Go, Ruby, PHP, or .NET)
    - If you provide the code for any of these applications, flexible can build the container image and then deploy it to App Engine Flexible
  - Cannot scale down to Zero instances.
    - If you have an App Engine Flexible application running, it would have at least one instance running all the time
